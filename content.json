{"meta":{"title":"蜗牛","subtitle":"","description":"","author":"林蜗牛","url":"http://yoursite.com","root":"/"},"pages":[{"title":"photos","date":"2020-01-21T05:04:10.000Z","updated":"2020-01-21T05:04:10.672Z","comments":true,"path":"photos/index.html","permalink":"http://yoursite.com/photos/index.html","excerpt":"","text":""}],"posts":[{"title":"java算法入门笔记（一）数组","slug":"java算法入门笔记（一）数组","date":"2020-02-04T14:02:58.790Z","updated":"2020-02-04T14:02:32.442Z","comments":true,"path":"2020/02/04/java算法入门笔记（一）数组/","link":"","permalink":"http://yoursite.com/2020/02/04/java%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/","excerpt":"","text":"java算法入门笔记（一）数组1.声明数组和创建数组（1）声明数组1234int[] arr //声明一个数组变量[] //表示该变量是一个数组int //表示数组类型arr //表示数组变量名称 例1.1123456public class Array&#123; public static void main(String[] args )&#123; //声明一个数组 int[] arr; &#125; &#125; （2）创建数组注意：创建数组时，要指明数组的长度。 12int[] arr1 = new int[50]; //数组长度为50int[] arr2 = new int[]&#123;2,2,3] //数组长度为数组元素的个数 例1.2123456789101112public class Array&#123; public static void main(String[] args)&#123; //第一种写法 int[] arr1; //声明数组 arr1 = new int[10]; //初始化数组，定义数组的大小 //int[] arr = new int[10]; int[] arr2; arr2 = new int[]&#123;2,3,4&#125;; //int[] arr2 = new int[]&#123;2,3,4&#125;; &#125;&#125; 2.访问数组和数组长度（1）访问数组访问数组可以通过数组下标访问数组存储的值 注意:数组下标基0，即数组下标从0开始，下标为0表示数组的第一个数，最大的下标 = 数组长度 - 1 例2.1123456789101112131415public class Array&#123; public static void main(String[] args)&#123; int[] arr; arr = new int[5]; arr[0] = 1; //下标0，表示数组的第一个数 arr[1] = 2; arr[2] = 3; arr[3] = 4; arr[4] = 5; //打印数组的第一个元素的值 System.out.println(arr[0]); &#125;&#125; （2）数组长度可以通过.length属性来访问一个数组的长度 例2.212345678910111213public class Array&#123; public void static main(String[] args)&#123; int[] arr = new int[]&#123;2,3,4,5,6,7&#125;; //打印数组长度 System.out.println(arr.length); //打印数组 System.out.print(\"[\"); for(int i = 0; i &lt; arr.length; i++)&#123; System.out.print(arr[i] + \" \"); &#125; System.out.print(\"]\"); &#125;&#125; 3.自定义封装数组123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129public class MyArray &#123; private long[] arr; //表示有效数组长度 private int elements; public MyArray() &#123; arr = new long[50]; &#125; /** * 插入数据 */ public void insert(long value) &#123; arr[elements] = value; elements++; &#125; /** * 有序插入 * @param value */ public void orderinsert(long value) &#123; int i; //找到要插入的位置下标 for(i = 0; i &lt; elements; i++)&#123; if (arr[i]&gt; value)&#123; break; &#125; &#125; //数组后移 for(int j = elements; j &gt; i; j--)&#123; arr[j] = arr[j-1]; &#125; arr[i] = value; elements++; &#125; /** * 显示数据 */ public void display() &#123; System.out.print(\"[\"); for (int i = 0; i &lt; elements; i++) &#123; System.out.print(arr[i] + \" \"); &#125; System.out.println(\"]\"); &#125; /** * 查找数据,根据值查找索引 */ public int search(long value) &#123; int i; for (i = 0; i &lt; elements; i++) &#123; if (value == arr[i]) &#123; break; &#125; &#125; if (i == elements) &#123; return -1; &#125; else &#123; return i; &#125; &#125; /** * 查找数据，根据索引查找 */ public long get(int index) &#123; if (index &gt;= elements || index &lt; 0) &#123; throw new ArrayIndexOutOfBoundsException(); &#125; else &#123; return arr[index]; &#125; &#125; /** * 二分法查找数据 */ public int binarySearch(long value) &#123; int middle = 0; int low = 0; int pow = elements; while(true) &#123; middle = (pow + low) / 2; if(arr[middle] == value) &#123; return middle; &#125; else if(low &gt; pow) &#123; return -1; &#125; else &#123; if(arr[middle] &gt; value) &#123; pow = middle - 1; &#125; else &#123; low = middle + 1; &#125; &#125; &#125; &#125; /** * 删除数据 */ public void delete(int index) &#123; if (index &gt;= elements || index &lt; 0) &#123; throw new ArrayIndexOutOfBoundsException(); &#125; else &#123; for (int i = index; i &lt; elements; i++) &#123; arr[index] = arr[index + 1]; &#125; elements--; &#125; &#125; /** * 更新数据 */ public void change(int index, long newvalue)&#123; if (index &gt;= elements || index &lt; 0)&#123; throw new ArrayIndexOutOfBoundsException(); &#125;else&#123; arr[index] = newvalue ; &#125; &#125; &#125; 4.练习例4.1查找数组里的最小值1234567891011121314151617181920212223public class FindMIn &#123; public static void main(String[] args) &#123; int[] arr = new int[5]; for (int i = 0; i &lt; arr.length; i++)&#123; arr[i] = (int) (Math.random()*100); &#125; System.out.println(\"数组中各个随机数是：\"); System.out.print(\"[\"); for (int j = 0; j &lt; arr.length; j++)&#123; System.out.print(arr[j] + \" \"); &#125; System.out.println(\"]\"); int min = arr[0]; for(int k = 0; k &lt; arr.length; k++)&#123; if(arr[k] &lt; min)&#123; min = arr[k]; &#125; &#125; System.out.println(\"最小值为：\"+ min); &#125;&#125;","categories":[],"tags":[]}]}